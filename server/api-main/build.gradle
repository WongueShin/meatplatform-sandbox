/*
 * sirloin-sandbox-server
 * Distributed under CC BY-NC-SA
 */
// POINT: 이 Build script 는 무슨 일을 하나요? 1문장으로, 3분에, 10분에 걸쳐서 설명해 주세요.
version "0.1"

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-allopen"

apply from: "$project.rootDir/gradle/scripts/packaging.gradle"
apply from: "sourceSets.gradle"
apply from: "largeTest.gradle"

dependencies {
    def MODULE_CORE = "api-core"
    def MODULE_CORE_INFRA_IMPL = "api-core-infra-impl"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$version_springBoot"
    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor:$version_springBoot"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor:$version_springBoot"

    // Spring boot
    implementation "org.springframework.boot:spring-boot-starter:$version_springBoot"
    implementation "org.springframework.boot:spring-boot-starter-validation:$version_springBoot"

    // Spring Web
    implementation("org.springframework.boot:spring-boot-starter-web:$version_springBoot") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow:$version_springBoot"
    // Spring boot 3 출시 이후 io.undertow:undertow-servlet-jakartaee9 로 이전 필요
    implementation "io.undertow:undertow-servlet:$version_servlet"

    // Jackson Kotlin support
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$version_jackson_kotlin"

    // Project dependencies
    implementation project(":${MODULE_CORE}")
    implementation project(":${MODULE_CORE_INFRA_IMPL}")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
    }
}

jar.dependsOn bootJar

// compileJava -> processResources -> classes 순으로 gradle task 실행
compileJava.doFirst {
    String version = getGitTag()
    if (version.isEmpty()) {
        version = "${project.version}.${determineBuildNumber()}"
    }

    // Write JSON as resources
    final json = groovy.json.JsonOutput.toJson([
            "version"    : version,
            "fingerprint": getGitSha(),
            "profile"    : getBuildConfig(),
    ])
    final mainResourcesDir = new File(project.projectDir, "src/main/resources")
    if (!mainResourcesDir.exists()) {
        mainResourcesDir.mkdirs()
    }
    new File(mainResourcesDir, "build_${project.name}.json").write(json)

    // Overrides version before JAR packaging
    project.version = version
    println("Project version has been overriden to ${project.version}")
}
